/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Public API
 * OpenAPI spec version: 0.0.0
 */
import type {
  Key
} from 'swr'
import useSWRMutation from 'swr/mutation'
import type {
  SWRMutationConfiguration
} from 'swr/mutation'
import type {
  SignUpRequest
} from '../models'
import { publicInstance } from '../publicInstance';
import type { ErrorType } from '../publicInstance';


  
  type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const signUpCreate = (
    signUpRequest: SignUpRequest,
 options?: SecondParameter<typeof publicInstance>) => {
    return publicInstance<void>(
    {url: `/api/public/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signUpRequest
    },
    options);
  }



export const getSignUpCreateMutationFetcher = ( options?: SecondParameter<typeof publicInstance>) => {
  return (_: Key, { arg }: { arg: SignUpRequest }): Promise<void> => {
    return signUpCreate(arg, options);
  }
}
export const getSignUpCreateMutationKey = () => [`/api/public/signup`] as const;

export type SignUpCreateMutationResult = NonNullable<Awaited<ReturnType<typeof signUpCreate>>>
export type SignUpCreateMutationError = ErrorType<unknown>

export const useSignUpCreate = <TError = ErrorType<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof signUpCreate>>, TError, Key, SignUpRequest, Awaited<ReturnType<typeof signUpCreate>>> & { swrKey?: string }, request?: SecondParameter<typeof publicInstance>}
) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getSignUpCreateMutationKey();
  const swrFn = getSignUpCreateMutationFetcher(requestOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

