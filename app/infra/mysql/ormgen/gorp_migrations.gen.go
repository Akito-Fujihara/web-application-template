// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package ormgen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/Akito-Fujihara/web-application-template/app/infra/mysql/schema"
)

func newGorpMigration(db *gorm.DB, opts ...gen.DOOption) gorpMigration {
	_gorpMigration := gorpMigration{}

	_gorpMigration.gorpMigrationDo.UseDB(db, opts...)
	_gorpMigration.gorpMigrationDo.UseModel(&schema.GorpMigration{})

	tableName := _gorpMigration.gorpMigrationDo.TableName()
	_gorpMigration.ALL = field.NewAsterisk(tableName)
	_gorpMigration.ID = field.NewString(tableName, "id")
	_gorpMigration.AppliedAt = field.NewTime(tableName, "applied_at")

	_gorpMigration.fillFieldMap()

	return _gorpMigration
}

type gorpMigration struct {
	gorpMigrationDo gorpMigrationDo

	ALL       field.Asterisk
	ID        field.String
	AppliedAt field.Time

	fieldMap map[string]field.Expr
}

func (g gorpMigration) Table(newTableName string) *gorpMigration {
	g.gorpMigrationDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gorpMigration) As(alias string) *gorpMigration {
	g.gorpMigrationDo.DO = *(g.gorpMigrationDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gorpMigration) updateTableName(table string) *gorpMigration {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewString(table, "id")
	g.AppliedAt = field.NewTime(table, "applied_at")

	g.fillFieldMap()

	return g
}

func (g *gorpMigration) WithContext(ctx context.Context) *gorpMigrationDo {
	return g.gorpMigrationDo.WithContext(ctx)
}

func (g gorpMigration) TableName() string { return g.gorpMigrationDo.TableName() }

func (g gorpMigration) Alias() string { return g.gorpMigrationDo.Alias() }

func (g gorpMigration) Columns(cols ...field.Expr) gen.Columns {
	return g.gorpMigrationDo.Columns(cols...)
}

func (g *gorpMigration) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gorpMigration) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 2)
	g.fieldMap["id"] = g.ID
	g.fieldMap["applied_at"] = g.AppliedAt
}

func (g gorpMigration) clone(db *gorm.DB) gorpMigration {
	g.gorpMigrationDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gorpMigration) replaceDB(db *gorm.DB) gorpMigration {
	g.gorpMigrationDo.ReplaceDB(db)
	return g
}

type gorpMigrationDo struct{ gen.DO }

func (g gorpMigrationDo) Debug() *gorpMigrationDo {
	return g.withDO(g.DO.Debug())
}

func (g gorpMigrationDo) WithContext(ctx context.Context) *gorpMigrationDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gorpMigrationDo) ReadDB() *gorpMigrationDo {
	return g.Clauses(dbresolver.Read)
}

func (g gorpMigrationDo) WriteDB() *gorpMigrationDo {
	return g.Clauses(dbresolver.Write)
}

func (g gorpMigrationDo) Session(config *gorm.Session) *gorpMigrationDo {
	return g.withDO(g.DO.Session(config))
}

func (g gorpMigrationDo) Clauses(conds ...clause.Expression) *gorpMigrationDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gorpMigrationDo) Returning(value interface{}, columns ...string) *gorpMigrationDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gorpMigrationDo) Not(conds ...gen.Condition) *gorpMigrationDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gorpMigrationDo) Or(conds ...gen.Condition) *gorpMigrationDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gorpMigrationDo) Select(conds ...field.Expr) *gorpMigrationDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gorpMigrationDo) Where(conds ...gen.Condition) *gorpMigrationDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gorpMigrationDo) Order(conds ...field.Expr) *gorpMigrationDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gorpMigrationDo) Distinct(cols ...field.Expr) *gorpMigrationDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gorpMigrationDo) Omit(cols ...field.Expr) *gorpMigrationDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gorpMigrationDo) Join(table schema.Tabler, on ...field.Expr) *gorpMigrationDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gorpMigrationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gorpMigrationDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gorpMigrationDo) RightJoin(table schema.Tabler, on ...field.Expr) *gorpMigrationDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gorpMigrationDo) Group(cols ...field.Expr) *gorpMigrationDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gorpMigrationDo) Having(conds ...gen.Condition) *gorpMigrationDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gorpMigrationDo) Limit(limit int) *gorpMigrationDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gorpMigrationDo) Offset(offset int) *gorpMigrationDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gorpMigrationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gorpMigrationDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gorpMigrationDo) Unscoped() *gorpMigrationDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gorpMigrationDo) Create(values ...*schema.GorpMigration) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gorpMigrationDo) CreateInBatches(values []*schema.GorpMigration, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gorpMigrationDo) Save(values ...*schema.GorpMigration) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gorpMigrationDo) First() (*schema.GorpMigration, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*schema.GorpMigration), nil
	}
}

func (g gorpMigrationDo) Take() (*schema.GorpMigration, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*schema.GorpMigration), nil
	}
}

func (g gorpMigrationDo) Last() (*schema.GorpMigration, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*schema.GorpMigration), nil
	}
}

func (g gorpMigrationDo) Find() ([]*schema.GorpMigration, error) {
	result, err := g.DO.Find()
	return result.([]*schema.GorpMigration), err
}

func (g gorpMigrationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*schema.GorpMigration, err error) {
	buf := make([]*schema.GorpMigration, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gorpMigrationDo) FindInBatches(result *[]*schema.GorpMigration, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gorpMigrationDo) Attrs(attrs ...field.AssignExpr) *gorpMigrationDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gorpMigrationDo) Assign(attrs ...field.AssignExpr) *gorpMigrationDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gorpMigrationDo) Joins(fields ...field.RelationField) *gorpMigrationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gorpMigrationDo) Preload(fields ...field.RelationField) *gorpMigrationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gorpMigrationDo) FirstOrInit() (*schema.GorpMigration, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*schema.GorpMigration), nil
	}
}

func (g gorpMigrationDo) FirstOrCreate() (*schema.GorpMigration, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*schema.GorpMigration), nil
	}
}

func (g gorpMigrationDo) FindByPage(offset int, limit int) (result []*schema.GorpMigration, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gorpMigrationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gorpMigrationDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gorpMigrationDo) Delete(models ...*schema.GorpMigration) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gorpMigrationDo) withDO(do gen.Dao) *gorpMigrationDo {
	g.DO = *do.(*gen.DO)
	return g
}
